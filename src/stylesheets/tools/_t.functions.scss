/*
    TOOLS.FUNCTIONS
    ----

    Global, app-wide helper functions
    Some are just shortcuts to avoid verbosity
    and remember map names.
* ==================================================== */


/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}



/*
    getAppColor()
    ----

    retrives a color from the app-colors-maps defined at _global.scss
    tone defaults to base, i want another, pass as second argument.
    Plicas are optional.

    Depends on:
      map-deep-get()
        setting.colors.scss

    How to use:
    getAppColor('primary') === getColor('primary', 'base')
    getAppColor('primary', 'light') retrieves light variation
*/

@function getAppColor($color, $tone: "base") {
    @if map-has-key($g-colors-maps, $color) {
        @if (type-of(map-get($g-colors-maps, $color)) == 'color' )  {
            @return map-get($g-colors-maps, $color);
        } @else {
           @return map-deep-get($g-colors-maps, $color, $tone); // it's a map, get tone
        }
    }
    //else
    @error "`#{$color}` is not in $app-colors-maps. Check _s.app-colors.scss";
    @return false;
}



/*
    getTransition()
    ----

   just to avoid verbosity of map-get($transition-map-name);

*/

@function getTransition($transition: 'smooth') {
    @if map-has-key($g-transitions-map, $transition) {
        @return map-get($g-transitions-map, $transition);
    }
    //else
    @error "`#{$transition}` is not in #{$map}. Check settings folder, maybe you mispelled a key";
    @return false;
 }


/*
    All credits to Hugo Giraudel
*/
@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
  $colors: (
    'red': red($color),
    'green': green($color),
    'blue': blue($color)
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: $value / 255;

    @if $value < 0.03928 {
      $value: $value / 12.92;
    } @else {
      $value: ($value + .055) / 1.055;
      $value: pow($value, 2.4);
    }

    $colors: map-merge($colors, ($name: $value));
  }

  @return (map-get($colors, 'red') * .2126) + (map-get($colors, 'green') * .7152) + (map-get($colors, 'blue') * .0722);
}
